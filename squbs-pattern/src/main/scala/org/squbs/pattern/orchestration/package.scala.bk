/*
 *  Copyright 2017 PayPal
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.squbs.pattern

import scala.collection.mutable.ArrayBuffer
import scala.collection.{GenTraversable, generic, mutable}

package object orchestration {

  /* Functionality reused in Iterator.CanBuildFrom */
  private[orchestration] abstract class BufferedCanBuildFrom[A, CC[X] <: TraversableOnce[X]]
    extends generic.CanBuildFrom[CC[_], A, CC[A]] {
    def bufferToColl[B](buff: ArrayBuffer[B]): CC[B]
    def traversableToColl[B](t: GenTraversable[B]): CC[B]

    def newIterator: mutable.Builder[A, CC[A]] = new ArrayBuffer[A] mapResult bufferToColl

    /** Creates a new builder on request of a collection.
      *  @param from  the collection requesting the builder to be created.
      *  @return the result of invoking the `genericBuilder` method on `from`.
      */
    def apply(from: CC[_]): mutable.Builder[A, CC[A]] = from match {
      case xs: generic.GenericTraversableTemplate[_, _] => xs.genericBuilder
        .asInstanceOf[mutable.Builder[A, Traversable[A]]] mapResult {
        case res => traversableToColl(res.asInstanceOf[GenTraversable[A]])
      }
      case _ => newIterator
    }

    /** Creates a new builder from scratch
      *  @return the result of invoking the `newBuilder` method of this factory.
      */
    def apply(): mutable.Builder[A, CC[A]] = newIterator
  }

  /** With the advent of `TraversableOnce`, it can be useful to have a builder which
    *  operates on `Iterator`s so they can be treated uniformly along with the collections.
    *  See `scala.util.Random.shuffle` or `scala.concurrent.Future.sequence` for an example.
    */
  class OnceCanBuildFrom[A] extends BufferedCanBuildFrom[A, TraversableOnce] {
    def bufferToColl[B](buff: ArrayBuffer[B]): Iterator[Any] = buff.iterator
    def traversableToColl[B](t: GenTraversable[B]): Traversable[B] = t.seq
  }

  /** Evidence for building collections from `TraversableOnce` collections */
  implicit def onceCanBuildFrom[A]: OnceCanBuildFrom[A] = new OnceCanBuildFrom[A]
}
