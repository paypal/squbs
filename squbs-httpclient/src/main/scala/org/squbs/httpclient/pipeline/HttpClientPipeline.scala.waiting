/*
 * Copyright 2017 PayPal
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.squbs.httpclient.pipeline

import java.util.concurrent.TimeUnit
import javax.net.ssl.SSLContext

import akka.actor._
import akka.util.Timeout
import com.typesafe.scalalogging.LazyLogging
//import org.squbs.httpclient.{Status, _}
import org.squbs.endpoint.Endpoint
import org.squbs.pipeline._
import spray.can.Http
import spray.http.{HttpRequest, HttpResponse}
import spray.httpx.unmarshalling._
import spray.httpx.{PipelineException, UnsuccessfulResponseException}
import spray.io.ClientSSLEngineProvider

import scala.concurrent.Future
import scala.language.implicitConversions
import scala.util.Try

object HttpClientUnmarshal{

  implicit class HttpResponseUnmarshal(val response: HttpResponse) extends AnyVal {

    def unmarshalTo[T: FromResponseUnmarshaller]: Try[T] = {
      Try{
        if (response.status.isSuccess && response.status.allowsEntity && response.entity.nonEmpty)
          response.as[T] match {
            case Right(value) ⇒ value
            case Left(error) ⇒
              throw new PipelineException(error.toString, cause = new UnsuccessfulResponseException(response))
          }
        else throw new UnsuccessfulResponseException(response)
      }
    }
  }
}
